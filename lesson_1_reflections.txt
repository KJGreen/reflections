How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    If you can ignore all the unchanged code then you can quickly narrow
    issues to a few potential error lines.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    When new features are implemented it is nice to have an old working copy
    you can revert to if everything blows up. Maybe a new feature breaks when
    used with a specific function and you can narrow it down to which parts
    are causing the problem.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    I think by choosing and labeling the comits that you are forced to make
    them actually useful and time saving later on when trying to go back to
    an old copy. It takes more time and thought up front but it makes the system
    useful

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    In programming enviorments there are many dependancies between files. In
   documents they are normally stand alone so there isnt a need for syncronization.

How can you use the commands git log and git diff to view the history of files?

    You can check the log for the change you are interested in and "quickly" look
    at the difference between them to see what was done

How might using version control make you more confident to make changes that
could break something?

    You wont be worried about making major changes when you know you can revert
    them whenever you want

Now that you have your workspace set up, what do you want to try using Git for?

    Simulating gaits?